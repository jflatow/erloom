#!/usr/bin/env escript
%% -*- erlang -*-

follow(Path) ->
    case file:read_link_all(Path) of
        {ok, Linked} ->
            follow(filename:absname(Linked, filename:dirname(Path)));
        {error, einval} ->
            Path
    end.

add_paths() ->
    Script = follow(escript:script_name()),
    RelPath = filename:dirname(filename:dirname(Script)),
    code:add_paths([RelPath ++ "/ebin",
                    RelPath ++ "/deps/erlkit/ebin"]).

get_opts(Args) ->
    get_opts(Args, {[], []}).

get_opts(["-d"|Rest], {Args, Opts}) ->
    get_opts(Rest, {Args, [{deps, true}|Opts]});
get_opts(["-r"|Rest], {Args, Opts}) ->
    get_opts(Rest, {Args, [{refs, true}|Opts]});
get_opts(["-y"|Rest], {Args, Opts}) ->
    get_opts(Rest, {Args, [{yarn, true}|Opts]});
get_opts([Arg|Rest], {Args, Opts}) ->
    get_opts(Rest, {[Arg|Args], Opts});
get_opts([], {Args, Opts}) ->
    {lists:reverse(Args), lists:reverse(Opts)}.

main(Args) ->
    add_paths(),
    case get_opts(Args) of
        {Homes, Opts} ->
            lists:foldl(fun (H, _) -> lcat(H, Opts) end, nil, Homes)
    end.

lcat(Home, Opts) ->
    LocusFmt = erloom_bin:locus_formatter(Opts),
    MessageFmt = erloom_bin:message_formatter(Opts),
    erloom_logs:fold(
      fun (Message, Locus,  _) ->
              io:format("~s\t~s~n", [LocusFmt(Locus), MessageFmt(Message)])
      end, nil, Home).
