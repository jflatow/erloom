#!/usr/bin/env escript
%% -*- erlang -*-

follow(Path) ->
    case file:read_link_all(Path) of
        {ok, Linked} ->
            follow(filename:absname(Linked, filename:dirname(Path)));
        {error, einval} ->
            Path
    end.

add_paths() ->
    Script = follow(escript:script_name()),
    RelPath = filename:dirname(filename:dirname(Script)),
    code:add_paths([RelPath ++ "/ebin",
                    RelPath ++ "/deps/erlkit/ebin"]).

main(Homes) ->
    add_paths(),
    lists:foldl(fun (H, _) -> lcat(H) end, nil, Homes).

lcat(Home) ->
    erloom_logs:fold(
      fun (Message, {{Node, IId}, {_, After}},  _) ->
              Deps = util:get(Message, deps, #{}),
              Refs = util:get(Message, refs, []),
              Type = util:get(Message, type, "-"),
              Kind = util:get(Message, kind, "-"),
              Yarn = util:get(Message, yarn, "-"),
              Line = line(maps:without([deps, refs, type, kind, yarn], Message)),
              io:format("~s ~s ~p\t~B ~B\t~-8s\t~-8s\t~-48s\t~s~n",
                        [Node, IId, After,
                         map_size(Deps), len(Refs),
                         Type, Kind, spin(Yarn), Line])
      end, nil, Home).

line(Message) ->
    util:join(
      maps:fold(fun (K, V, A) ->
                        [io_lib:format("~s=~1024p", [K, V])|A]
                end, [], Message), "\t").

spin(Yarn) when is_map(Yarn) ->
    util:join(
      maps:fold(fun (K, {X, Y}, A) when is_atom(K), is_binary(X) ->
                        [io_lib:format("~s ~s ~p", [K, X, Y])|A];
                    (K, V, A) ->
                        [io_lib:format("~p:~p", [K, V])|A]
                end, [], Yarn), "/");
spin(Yarn) ->
    Yarn.

len(List) when is_list(List) ->
    length(List);
len(_) ->
    1.
